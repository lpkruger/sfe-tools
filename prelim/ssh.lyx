#LyX 1.4.4 created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass article
\begin_preamble

\linespread{1.1}
\end_preamble
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry true
\use_amsmath 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 1.25in
\topmargin 1.25in
\rightmargin 1.25in
\bottommargin 1.25in
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes true
\end_header

\begin_body

\begin_layout Section
Strengthening SSH Password Authentication
\end_layout

\begin_layout Subsection
SSH Protocol Overview
\end_layout

\begin_layout Standard
SSH is an application originally designed as an alternative to telnet for
 interactive sessions with confidentiality, authentication, and integrity.
 In the years since it was first introduced, it has gained many features
 and can now serve as a secure transport layer underneath many other insecure
 protocols.
 Version 1 of the SSH protocol was essentially undocumented, but version
 2, which is commonly used today, is an IETF standard.
 From here on, all references to the SSH protocol refer to version 2 unless
 otherwise specified.
\end_layout

\begin_layout Standard
The SSH protocol is defined in terms of layers, much like the OSI networking
 stack.
 Each layer is defined in terms of messages from the underlying layer.
 The lowest level is an application packet based transport protocol that
 is layered on top of TCP.
 All SSH messages of the higher layers are sent as packets.
 This packet protocol is known as the SSH transport layer protocol and is
 defined in 
\begin_inset LatexCommand \cite{rfc4253}

\end_inset

.
 Figure 
\begin_inset LatexCommand \ref{fig:ssh-overview}

\end_inset

 shows the hierarchy of the ssh protocol layers discussed here.
 The SSH transport layer also handles the server key authentication, encryption,
 and integrity of a session.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Graphics
	filename ssh_overview.png
	lyxscale 5
	scale 40
	keepAspectRatio
	clip
	rotateAngle 270

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{fig:ssh-overview}

\end_inset

 protocol hierarchy
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Session Initialization
\end_layout

\begin_layout Standard
During the initial handshake, the hosts perform a key exchange and the client
 validates the server key, and there is negotiation for an initial set of
 cryptographic algorithms (cipher, HMAC) that will used for the session.
 An overview of the handshake messages are shown in 
\begin_inset LatexCommand \ref{fig:ssh-init}

\end_inset

.
 The steps of the protocol are as follows.
 Refer to 
\begin_inset LatexCommand \ref{fig:ssh2-init}

\end_inset

 for details.
\end_layout

\begin_layout Enumerate
The SSH server sends a string of the form 
\begin_inset Quotes eld
\end_inset

SSH-2.0-
\emph on
software
\emph default

\begin_inset Quotes erd
\end_inset

.
 The 
\emph on
software
\emph default
 string identifies the particular client or server.
 (as a variation, it may also send SSH-1.99-
\emph on
software
\begin_inset Quotes erd
\end_inset


\emph default
 to indicate protocol version 1 compatibility) For example, the OpenSSH
 4.5 software sends 
\begin_inset Quotes eld
\end_inset

SSH-1.99-OpenSSH_4.5
\begin_inset Quotes erd
\end_inset

.
 If the client does not understand the protocol version, it disconnects,
 otherwise it sends a similar string to the server.
 After these strings are sent, all traffic uses the binary packet protocol
 shown in 
\begin_inset LatexCommand \ref{fig:ssh-packet}

\end_inset

.
\newline

\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Graphics
	filename ssh_packet.png
	lyxscale 5
	scale 40
	keepAspectRatio
	clip
	rotateAngle 270

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{fig:ssh-packet}

\end_inset

 binary packet structure
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Each party sends an SSH_MSG_KEXINIT message to begin the key exchange.
 This message includes a list of supported ciphers, HMAC algorithms, compression
 algorithms, and key exchange algorithms, ranked by preference.
 For each algorithm, the parties choose the highest preference algorithm
 of the client, which is also supported by the server.
 If one of the algorithm lists has no algorithm in common, the connection
 is terminated.
 The format of the SSH_MSG_KEXINIT message are as follows:
\end_layout

\begin_deeper
\begin_layout LyX-Code
      byte         SSH_MSG_KEXINIT
\end_layout

\begin_layout LyX-Code
      byte[16]     cookie (random bytes)
\end_layout

\begin_layout LyX-Code
      name-list    kex_algorithms
\end_layout

\begin_layout LyX-Code
      name-list    server_host_key_algorithms
\end_layout

\begin_layout LyX-Code
      name-list    encryption_algorithms_client_to_server
\end_layout

\begin_layout LyX-Code
      name-list    encryption_algorithms_server_to_client
\end_layout

\begin_layout LyX-Code
      name-list    mac_algorithms_client_to_server
\end_layout

\begin_layout LyX-Code
      name-list    mac_algorithms_server_to_client
\end_layout

\begin_layout LyX-Code
      name-list    compression_algorithms_client_to_server
\end_layout

\begin_layout LyX-Code
      name-list    compression_algorithms_server_to_client
\end_layout

\begin_layout LyX-Code
      name-list    languages_client_to_server
\end_layout

\begin_layout LyX-Code
      name-list    languages_server_to_client
\end_layout

\begin_layout LyX-Code
      boolean      first_kex_packet_follows
\end_layout

\begin_layout LyX-Code
      uint32       0 (reserved for future extension)
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Graphics
	filename ssh_init.png
	lyxscale 5
	scale 40
	keepAspectRatio
	clip
	rotateAngle 270

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{fig:ssh-init}

\end_inset

 connection handshake protocol
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Graphics
	filename ssh2_p1.png
	lyxscale 50
	scale 40
	keepAspectRatio
	clip
	rotateAngle 270

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{fig:ssh2-init}

\end_inset

 connection handshake protocol
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Following the handshake, the key exchange protocol is performed.
 The specific algorithm used to do the key exchange is negotiated in the
 previous step.
 The original SSH2 specification included a single Diffie-Hellman group
 defined in 
\begin_inset LatexCommand \cite{rfc4253}

\end_inset

.
 A newer and more flexible key exchange algorithm is defined in 
\begin_inset LatexCommand \cite{rfc4419}

\end_inset

.
 The details of key exchange will not be discussed further.
 After the key exchange is complete, all of the data in the SSH stream is
 encrypted using the negotiated cipher and key.
 Specifically, the sequence of packets, excluding the packet size header,
 shown in 
\begin_inset LatexCommand \ref{fig:ssh-packet}

\end_inset

 is a single stream of plaintext encrypted by the cipher.
\end_layout

\begin_layout Standard
At this point, the protocol handshake is complete and the client may initiate
 arbitrary sub-protocols of SSH.
 Typically, however, the client will begin the client authentication protocol,
 as most servers require authentication before allowing other services to
 be provided.
\end_layout

\begin_layout Subsubsection
Client Authentication
\end_layout

\begin_layout Standard
When the initial handshake is complete, the client has verified the server
 key, if possible, but the client has not yet authenticated to the server.
 The SSH auth protocol can be initiated to perform this, and is defined
 by 
\begin_inset LatexCommand \cite{rfc4252}

\end_inset

.
 The auth protocol is flexible.
 The SSH standard describes several standard methods of authentication,
 such as password and public-key, arbitrary additional vendor or site specific
 authentication methods can be added.
\end_layout

\begin_layout Standard
To authenticate, the client chooses an authentication protocol.
 Here, we will consider two standard authentication types: 
\begin_inset Quotes eld
\end_inset

password
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

keyboard-interactive
\begin_inset Quotes erd
\end_inset

.
 The difference between these methods is that 
\begin_inset Quotes eld
\end_inset

password
\begin_inset Quotes erd
\end_inset

 allows only a single packet with a user name and password combination,
 whereas 
\begin_inset Quotes eld
\end_inset

keyboard-interactive
\begin_inset Quotes erd
\end_inset

 allows the server to send arbitrary prompts and wait for responses.
 This is suitable for multi-factor authentication.
 For example, using 
\begin_inset Quotes eld
\end_inset

keyboard-interactive
\begin_inset Quotes erd
\end_inset

 the server could first ask for a password, and then follow up with a series
 of challenge questions, and a random string from a secure token.
\end_layout

\begin_layout Standard
The messages used in password authentication are shown in 
\begin_inset LatexCommand \ref{fig:ssh-auth}

\end_inset

.
 For the purposes of this discussion, we will assume the client is using
 the 
\begin_inset Quotes eld
\end_inset

password
\begin_inset Quotes erd
\end_inset

 authentication method.
 The steps of this authentication are as follows:
\end_layout

\begin_layout Enumerate
The client sends the username and password to the server in an SSH_MSG_USERAUTH_
REQUEST message.
 The format of this message is:
\end_layout

\begin_deeper
\begin_layout LyX-Code
      byte      SSH_MSG_USERAUTH_REQUEST
\end_layout

\begin_layout LyX-Code
      string    user name in ISO-10646 UTF-8 encoding [RFC3629]
\end_layout

\begin_layout LyX-Code
      string    "password"
\end_layout

\begin_layout LyX-Code
      boolean   FALSE
\end_layout

\begin_layout LyX-Code
      string    plaintext password in ISO-10646 UTF-8 encoding 
\end_layout

\begin_layout LyX-Code

\end_layout

\end_deeper
\begin_layout Enumerate
If the server does not support the 
\begin_inset Quotes eld
\end_inset

password
\begin_inset Quotes erd
\end_inset

 method chosen, or the password is incorrect, the server will respond with
 an SSH_MSG_USERAUTH_FAILURE message.
 If the password is correct, the server sends a SSH_MSG_USERAUTH_SUCCESS
 message, and the client may begin requesting services.
 (The server may also send a SSH_MSG_USERAUTH_BANNER packet to communicate
 information directly to the user.
 It is analogous to the /etc/issue file used in standard Unix systems to
 display a message at a login prompt)
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Graphics
	filename ssh_auth.png
	lyxscale 5
	scale 40
	keepAspectRatio
	clip
	rotateAngle 270

\end_inset


\end_layout

\begin_layout Caption
\begin_inset LatexCommand \label{fig:ssh-auth}

\end_inset

 authentication protocol messages
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It is easy to see that the password is sent directly from the client to
 the server in a packet.
 Thus, the only protection from eavesdroppers is the encryption applied
 at the SSH transport layer.
 There is no protection of the client's authentication credentials from
 the server itself, so if the server is malicious or has been compromised,
 an attacker will learn everything the client sends, and can potentially
 impersonate the client at another time.
\end_layout

\begin_layout Subsection
Man in the Middle Attack
\end_layout

\begin_layout Standard
As mentioned in the previous section, the SSH protocol is vulnerable to
 password compromise.
 An attacker can exploit the insecurity of password transmission by mounting
 a 
\emph on
man in the middle
\emph default
 (MITM) attack.
 Although the protocol does provide some protection against MITM in the
 form of host key authentication, there are at least three ways in which
 an attacker can thrwart this protection:
\end_layout

\begin_layout Enumerate
If the attacker manages to steal the host key, then the attacker can successfull
y impersonate the server without detection.
 There is no other means for the client to authenticate the server.
\end_layout

\begin_layout Enumerate
If the client does not know the server's host key, then the host cannot
 be authenticated unless the client has an alternative trusted channel to
 validate the host key.
 The following message is typically displayed by the OpenSSH client when
 connecting to a server with an unknown key
\newline

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
The authenticity of host 'prospero (128.105.121.27)' can't be established.
\end_layout

\begin_layout LyX-Code
RSA key fingerprint is 3f:76:22:43:c2:03:b9:71:b0:31:ce:87:37:45:cb:02.
 
\end_layout

\begin_layout LyX-Code
Are you sure you want to continue connecting (yes/no)?
\end_layout

\end_inset


\newline

\end_layout

\begin_layout Enumerate
Practically speaking, it may be inconvenient for a user to authenticate
 the server using this message and make a correct decision.
 It is easy to imagine a user simply answering yes in order to bypass the
 inconvenience.
 
\end_layout

\begin_layout Enumerate
Even if the client does know the server's key, the there is no guarantee
 that a user would refuse to connect even if the authentication fails.
 For example, the user might think the server key changed for a non-malicious
 reason such as an operating system upgrade where the administrator forgot
 to backup the old key.
\end_layout

\begin_layout Standard
This vulnerability can be mitigated by using additional secrets which are
 shared between the client and server.
 The password is convenient shared secret in common use today.
 Typically, a password is considered only as a means of authenticating a
 client to a server, but with special protocols a password can also be used
 for simultaneous mutual authentication in a way that is secure, and does
 not compromise the password if the server is malicious.
 Such protocols are known as 
\emph on
shared password and key authentication 
\emph default
(SPAKA).
\end_layout

\begin_layout Standard
It is important to note that a 
\begin_inset Quotes eld
\end_inset

password
\begin_inset Quotes erd
\end_inset

 need not be a constant string that the user remembers over a long period
 of time, it can be any string that serves as a mutual authenticator.
 For example, secure ID tokens that display constantly changing strings,
 time synchronized with the server, are considered to be a more secure alternati
ve to traditional passwords, such alternatives are readily usable in SPAKA
 protocols.
\end_layout

\begin_layout Subsection
SPAKA
\end_layout

\begin_layout Standard

\emph on
Secure Password and Key Authentication 
\emph default
(SPAKA) is a class of authentication protocols first described in 
\begin_inset LatexCommand \cite{bellovin92}

\end_inset

.
 SPAKA protocols are designed to guarentee confidentiality of secrets even
 against active adversaries.
 There have been various SPAKA protocols proposed in the literature with
 varying properties.
 A recent SPAKA protocol is presented in 
\begin_inset LatexCommand \cite{brainard03}

\end_inset

.
 In this protocol, the user's password 
\begin_inset Formula $P$
\end_inset

 is split into two shares: 
\begin_inset Formula $P_{1}$
\end_inset

 and 
\begin_inset Formula $P_{2}$
\end_inset

.
 The value of 
\begin_inset Formula $P$
\end_inset

 can not be derived from either of the two shares alone, and each share
 is stored on a seperate server.
 To perform the protocol, the client splits 
\begin_inset Formula $P$
\end_inset

 into different shares 
\begin_inset Formula $P_{1}'$
\end_inset

 and 
\begin_inset Formula $P_{2}'$
\end_inset

, and sends these values to the servers.
 The servers then perform an evaluation protocol to determine if 
\begin_inset Formula $P_{1}\oplus P_{2}=P_{1}'\oplus P_{2}'$
\end_inset

.
\end_layout

\begin_layout Subsection
SPAKA using SFE
\end_layout

\begin_layout Standard
The design of protocols such as 
\begin_inset LatexCommand \cite{brainard03}

\end_inset

 suggests that SFE can be applied generally to the SPAKA problem.
 Here, I propose a general SPAKA construction based on SFE.
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $X$
\end_inset

 be the user's password.
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $Y=H(X)$
\end_inset

 be a hash of 
\begin_inset Formula $X$
\end_inset


\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $C$
\end_inset

 be the client and 
\begin_inset Formula $S$
\end_inset

 be the server.
 
\begin_inset Formula $C$
\end_inset

 and 
\begin_inset Formula $S$
\end_inset

 participate in a secure evaluation of the following function 
\begin_inset Formula $f$
\end_inset

, where 
\begin_inset Formula $C$
\end_inset

 provides input 
\begin_inset Formula $X$
\end_inset

 and 
\begin_inset Formula $S$
\end_inset

 provides input 
\begin_inset Formula $Y$
\end_inset

.
 
\begin_inset Formula $C$
\end_inset

 and 
\begin_inset Formula $S$
\end_inset

 both receive the same output from 
\begin_inset Formula $f$
\end_inset

, which is a single bit.
\end_layout

\begin_layout Standard
\begin_inset Formula $f(X,Y)=\left(Y=H\left(X\right)\right)$
\end_inset


\end_layout

\begin_layout Standard
If the value of the function is 
\begin_inset Formula $false$
\end_inset

 then the mutual authentication fails, otherwise the mutual authentication
 succeeds.
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $f$
\end_inset

 is evaluated securely, then 
\begin_inset Formula $C$
\end_inset

 and 
\begin_inset Formula $S$
\end_inset

 are guaranteed not to learn any information about the computation except
 for the single bit of output.
 
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Enumerate
Practical SSH paper
\end_layout

\begin_layout Enumerate
New protocol paper
\end_layout

\begin_layout Enumerate
Theoretical paper
\end_layout

\begin_layout Enumerate
Graduate!!!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Standard
\begin_inset LatexCommand \bibtex[plain]{somesh,ssh}

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
