#LyX 1.4.3-5 created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass article
\begin_preamble

\linespread{1.1}
\end_preamble
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry true
\use_amsmath 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 1.25in
\topmargin 1.25in
\rightmargin 1.25in
\bottommargin 1.25in
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes true
\end_header

\begin_body

\begin_layout Title
Practical Secure Function Evaluation
\shape italic
\size normal

\newline
Research Proposal for Ph.D Preliminary Exam
\end_layout

\begin_layout Author
Louis Kruger
\newline
University of Wisconsin Madison
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Quote
\begin_inset Note Comment
status open

\begin_layout Quote
As every man goes through life he fills in a number of forms for the record,
 each containing a number of questions...
 There are thus hundreds of little threads radiating from every man, millions
 of threads in all.
 If these threads were suddenly to become visible, the whole sky would look
 like a spider's web, and if they materialized as rubber bands, buses; trams
 and even people would all lose the ability to move, and the wind would
 be unable to carry torn-up newspapers or autumn leaves along the streets
 of the city.
 They are not visible, they are not material, but every man is constantly
 aware of their existence....
 Each man, permanently aware of his own invisible threads, naturally develops
 a respect for the people who manipulate the threads.
\end_layout

\begin_layout Quote
--Alexander Solzhenitsyn, Cancer Ward, 1968.
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\emph on
Secure function evaluation
\emph default
 (SFE) is a technique which can address many privacy concerns of the modern
 age.
 Privacy is becoming an important concern as computers increase in power
 and the Internet continues to grow 
\begin_inset LatexCommand \cite{cra99,tur03}

\end_inset

.
 More and more data is stored on machines that are connected to the Internet,
 directly or indirectly, and there are many examples in the newspapers today
 of privacy compromising activities such as phishing, data theft, and identity
 theft.
 There are also many other reasons why privacy should be protected, including
 business competition, respect of personal privacy, and government mandate,
 such as HIPPA laws 
\begin_inset LatexCommand \cite{hippa}

\end_inset

 which mandate strict privacy among health-care professionals along with
 stiff penalties for violations.
\end_layout

\begin_layout Standard
Despite these many concerns, there is also a conflicting desire to perform
 useful computations with data.
 Data is not useful unless it can be accessed and manipulated.
 Sometimes various parties would like to collaborate on research involving
 sensitive data.
 For example, genetic data is the subject of much current research, but
 it is considered private.
 Researchers with access to different patients' data may want to combine
 their knowledge in the search for new cures for diseases, yet not reveal
 the sensitive data to collaborating parties.
 Competing businesses may want to perform joint market research for mutual
 benefit, without revealing sensitive customer data.
 The challenge is how to balance these competing concerns, making data available
 for legitimate uses while preserving as much privacy as possible.
\end_layout

\begin_layout Standard
There have been several methods developed so far for preserving personal
 privacy while permitting use of data.
 The most simple method, conceptually, is to replace identifying information,
 such as the name, social security number, and other sensitive data with
 random unique identifiers, and then using the transformed data for computation.
 If it is necessary to correlate the outputs of the computation with individuals
, the data owner can do this, but other parties presumably can not.
 However, this method has been shown to be vulnerable to attacks that correlate
 the transformed data with information available from external sources to
 reconstruct the obfuscated data, thereby breaking the privacy protection.
 
\begin_inset LatexCommand \cite{Malin04}

\end_inset

 Another method of preserving privacy is known as 
\emph on
secure multiparty computation
\emph default
.
 This is a technique of performing computations on inputs supplied by multiple
 parties while provably maintaining privacy guarantees.
 If the computation is a function evaluation, then it is called secure function
 evaluation, or SFE.
 The inputs to the function are partitioned among more than one party, and
 the function is computed collaboratively while preserving the privacy of
 each participant's individual inputs.
 In this case, privacy is considered preserved if no party learns any informatio
n that would affect their estimate of the probability distribution of another
 party's inputs, except for that which can be calculated by the parties'
 own inputs and the output of the joint function.
\begin_inset Note Greyedout
status open

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Standard
Needs clarification
\end_layout

\end_inset

 In other words, the entropy gain of each party is equivalent to the entropy
 gain in an idealized protocol where a trusted third party collects all
 the inputs, evaluates the function, and transmits only the output to each
 party.
 Depending on the protocol, the guarantees for some parties may be based
 on typical assumptions of computational hardness, while the guarantees
 for other parties may be information theoretic.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Although SFE has provable privacy guarantees, its implementation tends to
 be very expensive in terms of time and space for practical use.
 The space expense manifests itself in network bandwidth used in the protocols.
 These expenses explain why SFE has not been used very much outside of the
 academic literature, despite the fact that was formally introduced many
 years ago.
 There has been research in recent years to make SFE more practical.
 This research falls into two categories: general and function specific.
 General protocols allow any function expressed as a circuit computation
 to be evaluated securely.
 The Fairplay system 
\begin_inset LatexCommand \cite{Fairplay}

\end_inset

 is a straightforward implementation of the Yao protocol, along with a supportin
g compiler that allows secure functions to be written in a more familiar
 functional programming notation.
 Kruger et al .
 
\begin_inset LatexCommand \cite{kruger06}

\end_inset

 showed how 
\emph on
Ordered Binary Decision Diagrams
\emph default
 (OBDD) can be used to produce a more efficient protocol for secure evaluation
 in the case of certain functions.
 Function specific protocol design has produced secure protocols which perform
 dramatically better than general protocols.
 Privacy preserving data mining (PPDM) has been a major application driving
 such research 
\begin_inset LatexCommand \cite{verykios04stateart}

\end_inset

.
 Other protocols have been developed for various classes of functions such
 as polynomial evaluation 
\begin_inset LatexCommand \cite{naor99otope}

\end_inset

 and string alignment algorithms such as edit distance 
\begin_inset LatexCommand \cite{kruger07}

\end_inset

.
 Also, the amount of time required for the computations has benefited greatly
 from Moore's law.
 I have shown that in some cases, the computation requirements of the most
 general protocols can be adequate for practical use when performed on today's
 fastest CPUs 
\begin_inset LatexCommand \cite{kruger06}

\end_inset

.
 
\end_layout

\begin_layout Standard
I propose to continue researching ways to improve the efficiency and practicalit
y of privacy preserving protocols.
 My past work has looked at finding efficient protocols for specific classes
 of functions, in particular, one study analyzes several designs of a 
\begin_inset Formula $k$
\end_inset

-means clustering algorithm 
\begin_inset LatexCommand \cite{kruger05}

\end_inset

, and another discusses ways to design efficient protocols for many dynamic
 programming problems 
\begin_inset LatexCommand \cite{kruger07}

\end_inset

.
 I have also investigated the use of alternate circuit representations using
 OBDDs to improve the performance of general purpose protocols and showed
 that they can be beneficial for certain functions 
\begin_inset LatexCommand \cite{kruger06}

\end_inset

.
\end_layout

\begin_layout Standard
I am proposing to continue the work suggested by these initial studies,
 and further investigate ways to improve the performance and simplify the
 task of of constructing efficient privacy preserving protocols, culminating
 in an optimizing protocol compiler.
 In addition to the research results, I also plan to release the SFE compiler
 and supporting tools as a stimulus to expand future research in secure
 function evaluation.
\end_layout

\begin_layout Standard
Specifically, I propose that my work will create the following contributions:
\end_layout

\begin_layout Itemize
Protocols for other alternative representation of circuits.
 I will extend the previous work with OBDDs by creating hybrid circuits
 which compose sub-circuits represented as OBDDs with sub-circuits represented
 as Boolean circuits.
 I will also investigate whether extended OBDD models can be used to create
 additional efficiency improvements
\end_layout

\begin_layout Itemize
Protocols for evaluating functions with controlled leakage of information.
 The question being answered is whether performance improvements can be
 achieved by loosening the privacy guarantees in a controlled way, by specifying
 which data may and may not leak.
\end_layout

\begin_layout Itemize
A framework for analyzing a specific protocol and creating an equivalent
 protocol which is more efficient.
 This is analogous to the role played by an optimizing compiler for program
 code.
\end_layout

\begin_layout Itemize
An example showing that SFE can is useful in other aspects of security where
 it has not previously been used.
 Specificaly, I will show how SFE can be used to implement a more secure
 authentication protocol in SSH.
\end_layout

\begin_layout Section
Strengthening SSH Password Authentication
\end_layout

\begin_layout Subsection
SSH Protocol Overview
\end_layout

\begin_layout Standard
SSH is an application originally designed as an alternative to telnet for
 interactive sessions with confidentiality, authentication, and integrity.
 In the years since it was first introduced, it has gained many features
 and can now serve as a secure transport layer underneath many other insecure
 protocols.
 Version 1 of the SSH protocol was essentially undocumented, but version
 2, which is commonly used today, is an IETF standard.
 From here on, all references to the SSH protocol refer to version 2.
\end_layout

\begin_layout Standard
The SSH protocol is defined in terms of layers, much like the OSI networking
 stack.
 Each layer is defined in terms of messages from the underlying layer.
 The lowest level is a packet based transport protocol that runs over a
 stream transport such as TCP.
 All SSH messages of the higher layers are sent as packets.
 This packet protocol is known as the SSH transport layer protocol and is
 defined in 
\begin_inset LatexCommand \cite{rfc4253}

\end_inset

.
 Figure 
\begin_inset LatexCommand \ref{fig:ssh-overview}

\end_inset

 shows the hierarchy of the ssh protocol layers discussed here.
 The SSH transport layer also handles the server key authentication, encryption,
 and integrity of a session.
 During the initial handshake, the hosts perform a key exchange and the
 client validates the server key, and there is negotiation for an initial
 set of cryptographic algorithms (cipher, HMAC) that will used for the session.
 Following the handshake, all of the SSH stream is encrypted.
 Logically, the stream is broken up into packets.
 The structure of a packet is shown in figure 
\begin_inset LatexCommand \ref{fig:ssh-packet}

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Caption
\begin_inset LatexCommand \label{fig:ssh-overview}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ssh_overview.png
	lyxscale 5
	scale 40
	keepAspectRatio
	clip
	rotateAngle 270

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
When the initial handshake is complete, the client has verified the server
 key, if possible, but the client has not yet authenticated to the server.
 The SSH auth protocol can be initiated to perform this, and is defined
 by 
\begin_inset LatexCommand \cite{rfc4252}

\end_inset

.
 The auth protocol is flexible, and while the SSH standard describes several
 standard methods of authentication, such as password and public-key, arbitrary
 additional authentication methods can be added.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Caption
\begin_inset LatexCommand \label{fig:ssh-packet}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ssh_packet.png
	lyxscale 5
	scale 40
	keepAspectRatio
	clip
	rotateAngle 270

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To authenticate, the client chooses an authentication protocol.
 Here, we will consider two standard authentication types: 
\begin_inset Quotes eld
\end_inset

password
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

keyboard-interactive
\begin_inset Quotes erd
\end_inset

.
 The difference between these methods is that 
\begin_inset Quotes eld
\end_inset

password
\begin_inset Quotes erd
\end_inset

 allows only a single packet with a user name and password combination,
 whereas 
\begin_inset Quotes eld
\end_inset

keyboard-interactive
\begin_inset Quotes erd
\end_inset

 allows the server to send arbitrary prompts and wait for responses.
 This is suitable for multi-factor authentication.
\end_layout

\begin_layout Standard
In both of these methods, the password or response strings are sent directly
 from the client to the server in a packet.
 Thus, the only protection from eavesdroppers is the previously-negotiated
 encryption key.
 However, if the 
\begin_inset Quotes eld
\end_inset

server
\begin_inset Quotes erd
\end_inset

 is in fact an eavesdropper itself, or a 3rd party manages to learn the
 session key, the value of the password is compromised.
\end_layout

\begin_layout Section
Man in the Middle Attack
\end_layout

\begin_layout Standard
As mentioned in the previous section, the SSH protocol is vulnerable to
 password compromise.
 An attacker can exploit the insecurity of password transmission by mounting
 a 
\emph on
man in the middle
\emph default
 (MITM) attack.
 Although the protocol does provide some protection against MITM in the
 form of host key authentication, there are at least three ways in which
 an attacker can thrwart this protection:
\end_layout

\begin_layout Enumerate
If the attacker manages to steal the host key, then the attacker can successfull
y impersonate the server without detection.
 There is no other means for the client to authenticate the server.
\end_layout

\begin_layout Enumerate
If the client does not know the server's host key, then the host cannot
 be authenticated unless the client has an alternative trusted channel to
 validate the host key.
 The following message is typically displayed by the OpenSSH client when
 connecting to a server with an unknown key
\newline

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
The authenticity of host 'prospero (128.105.121.27)' can't be established.
\end_layout

\begin_layout LyX-Code
RSA key fingerprint is 3f:76:22:43:c2:03:b9:71:b0:31:ce:87:37:45:cb:02.
 
\end_layout

\begin_layout LyX-Code
Are you sure you want to continue connecting (yes/no)?
\end_layout

\end_inset


\newline
Practically speaking, it may be inconvenient for a user to authenticate
 the server using this message and make a correct decision.
 It is easy to imagine a user simply answering yes in order to bypass the
 inconvenience.
 
\end_layout

\begin_layout Enumerate
Even if the client does know the server's key, the there is no guarantee
 that a user would refuse to connect even if the authentication fails.
 For example, the user might think the server key changed for a non-malicious
 reason such as an operating system upgrade where the administrator forgot
 to backup the old key.
\end_layout

\begin_layout Standard
This vulnerability can be mitigated by using additional secrets which are
 shared between the client and server.
 The password is convenient shared secret in common use today.
 Typically, a password is considered only as a means of authenticating a
 client to a server, but with special protocols a password can also be used
 for simultaneous mutual authentication in a way that is secure, and does
 not compromise the password if the server is malicious.
 Such protocols are known as 
\emph on
shared password and key authentication 
\emph default
(SPAKA).
\end_layout

\begin_layout Standard
It is important to note that a 
\begin_inset Quotes eld
\end_inset

password
\begin_inset Quotes erd
\end_inset

 need not be a constant string that the user remembers over a long period
 of time, it can be any string that serves as a mutual authenticator.
 For example, secure ID tokens that display constantly changing strings,
 time synchronized with the server, are considered to be a more secure alternati
ve to traditional passwords, such alternatives are readily usable in SPAKA
 protocols.
\end_layout

\begin_layout Section
SPAKA using SFE
\end_layout

\begin_layout Standard

\emph on
Secure Password and Key Authentication 
\emph default
(SPAKA) is a class of authentication protocols first described in 
\begin_inset LatexCommand \cite{bellovin92}

\end_inset

.
 For an authentication protocol to be a SPAKA protocol, it must guarentee
 confidentiality of secrets even when one party in the authentication protocol
 is malicious.
 There have been various SPAKA protocols proposed in the literature with
 varying properties.
 
\begin_inset LatexCommand \cite{brainard03}

\end_inset

 Here, I propose a novel SPAKA protocol based on 
\emph on
Secure Function Evaluation 
\emph default
(SFE).
 
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $X$
\end_inset

 be the user's password.
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $Y=H(X)$
\end_inset

 be a hash of 
\begin_inset Formula $X$
\end_inset


\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $C$
\end_inset

 be the client and 
\begin_inset Formula $S$
\end_inset

 be the server.
 
\begin_inset Formula $C$
\end_inset

 and 
\begin_inset Formula $S$
\end_inset

 participate in a secure evaluation of the following function 
\begin_inset Formula $f$
\end_inset

, where 
\begin_inset Formula $C$
\end_inset

 provides input 
\begin_inset Formula $X$
\end_inset

 and 
\begin_inset Formula $S$
\end_inset

 provides input 
\begin_inset Formula $Y$
\end_inset

.
 
\begin_inset Formula $C$
\end_inset

 and 
\begin_inset Formula $S$
\end_inset

 both receive the same output from 
\begin_inset Formula $f$
\end_inset

, which is a single bit.
\end_layout

\begin_layout Standard
\begin_inset Formula $f(X,Y)=\left(Y=H\left(X\right)\right)$
\end_inset


\end_layout

\begin_layout Standard
If the value of the function is 
\begin_inset Formula $false$
\end_inset

 then the mutual authentication fails, otherwise the mutual authentication
 succeeds.
\end_layout

\begin_layout Standard
If 
\begin_inset Formula $f$
\end_inset

 is evaluated securely, then 
\begin_inset Formula $C$
\end_inset

 and 
\begin_inset Formula $S$
\end_inset

 are guaranteed not to learn any information about the computation except
 for the single bit of output.
 
\end_layout

\begin_layout Standard
\begin_inset LatexCommand \bibtex[plain]{somesh,ssh}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Enumerate
Practical SSH paper
\end_layout

\begin_layout Enumerate
New protocol paper
\end_layout

\begin_layout Enumerate
Theoretical paper
\end_layout

\begin_layout Enumerate
Graduate!!!
\end_layout

\end_inset


\end_layout

\end_body
\end_document
